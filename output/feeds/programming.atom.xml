<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - Programming</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2022-05-15T00:00:00+00:00</updated><entry><title>PyScript First Impressions</title><link href="/PyScriptFirstImpressions.html" rel="alternate"></link><published>2022-05-15T00:00:00+00:00</published><updated>2022-05-15T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2022-05-15:/PyScriptFirstImpressions.html</id><summary type="html">&lt;p&gt;PyScript is this awesome new tool that combines the browser with python, was released by the wonderful team at Anaconda,
and represents a paradigm change in browser capability.
I recently spent a number of hours testing it out and even got  PyMC to run (with some effort).
Longer thoughts below …&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyScript is this awesome new tool that combines the browser with python, was released by the wonderful team at Anaconda,
and represents a paradigm change in browser capability.
I recently spent a number of hours testing it out and even got  PyMC to run (with some effort).
Longer thoughts below, but let's start wth the summary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're totally new to Python&lt;/strong&gt;:  PyScript is very cool but not ready day to day use yet.
Use something like Anaconda if you can install stuff locally, or repl.it, Binder, or Colab if you can't.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're an educator&lt;/strong&gt;: This is going helpful in two ways.
First it'll smooth environment setup issues. Ideally eliminate it, students can just open a html file and get going.
The second is in access low to no internet environments, since all the code is client side it can load from a local file!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're a data Professional&lt;/strong&gt;:  This is going to change the game.
Currently, Plotly/Plotly Dash are the most current analogous solutions,
but both require hosting and take a "server side" approach.
PyScript takes a "client side, no server needed" approach which is huge shift. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're an OSS contributor&lt;/strong&gt;: Get your packages working on Pyodide ASAP.
As Peter explains in his talk your potential userbase will increase by over 10x&lt;/p&gt;
&lt;p&gt;The best source fo details is the &lt;a href="https://github.com/pyscript/pyscript"&gt;GitHub repo&lt;/a&gt;
or the &lt;a href="https://anaconda.cloud/pyscript-pycon2022-peter-wang-keynote"&gt;PyCON PyScript keynote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My test code is here, and you can watch me code the whole thing &lt;/p&gt;
&lt;div style="text-align: center;"&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/uW6sWe7yO98?start=13712" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2&gt;What is Pyscript&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://github.com/pyscript/pyscript"&gt;README&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PyScript is a meta project that aims to combine multiple open technologies into a framework that allows users to create sophisticated browser applications with Python. It integrates seamlessly with the way the DOM works in the browser and allows users to add Python logic in a way that feels natural both to web and Python developers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The way I see it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a way to get Python and other languages in front of people in an interface everyone is familiar
with (nearly) no install fuss&lt;/li&gt;
&lt;li&gt;A flexible tool to share and communicate data with professional colleagues, particularly ones
outside of my technical team&lt;/li&gt;
&lt;li&gt;A way for me to leverage the power of the internet and browser, in programming languages I'm comfortable with&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Current state and how you can help&lt;/h2&gt;
&lt;p&gt;As prominently displayed it's in an alpha state. 
However the Anaconda team is openly inviting contributors.
If you're a developer download the code and try it out, then either contribute directly to
PyScript and its associated libraries (Pyodide and micropython) or port other packages to the ecosystem.&lt;/p&gt;
&lt;p&gt;In the coming days I will add a section to this post with more in depth advice and tips.&lt;/p&gt;
&lt;h2&gt;Other Takes&lt;/h2&gt;
&lt;p&gt;Eric Ma has a &lt;a href="https://ericmjl.github.io/blog/2022/5/1/pyscript-python-in-the-web-browser/"&gt;great writeup&lt;/a&gt;
and embedded example with NetworkX which you should check out.
As I see more I'll append to this list&lt;/p&gt;
&lt;p&gt;&lt;meta name="twitter:card" content="summary_large_image"&gt;
&lt;meta name="twitter:creator" content="@canyon289"&gt;
&lt;meta name="twitter:title" content="A new tool in the toolbox"&gt;
&lt;meta name="twitter:description" content="Who doesn't love a new tool?!"&gt;
&lt;meta name="twitter:image" content="https://ravinkumar.com/images/SocialMedia/twitter/PyScript_Card.png"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Migrating from TravisCI to Azure Pipelines</title><link href="/AzurePipelines.html" rel="alternate"></link><published>2019-06-02T00:00:00+00:00</published><updated>2019-06-02T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2019-06-02:/AzurePipelines.html</id><summary type="html">&lt;p&gt;I'm in the process of testing out Azure Pipelines
with &lt;a href="https://arviz-devs.github.io/arviz/"&gt;ArviZ&lt;/a&gt;, and in
the process have learned more about the platform. I'll share
my motivation as well as some tips.&lt;/p&gt;
&lt;p&gt;Note that this is a live blog post that I'll continue to
update as a I learn more.&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm in the process of testing out Azure Pipelines
with &lt;a href="https://arviz-devs.github.io/arviz/"&gt;ArviZ&lt;/a&gt;, and in
the process have learned more about the platform. I'll share
my motivation as well as some tips.&lt;/p&gt;
&lt;p&gt;Note that this is a live blog post that I'll continue to
update as a I learn more.&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Many Open Source projects on free tiers of services quite heavily.
TravisCI was one of those vendors which provided a free tier for 
open source but after its acquisition its future is uncertain.&lt;/p&gt;
&lt;p&gt;At the same time Microsoft seems to be heavily investing in open
source, through acquisitions like GitHub and by open sourcing projects
like VScode.&lt;/p&gt;
&lt;p&gt;Practically speaking Microsoft is also offering more parallel builds and longer runtime
than TravisCI. PyMC3 recently ran into TravisCI's 50 minute build limit and we had to do some hacky
stuff to get around it. Having 6 hours of build time in Azure is very convenient.&lt;/p&gt;
&lt;p&gt;Due to these reasons we are trying both services in parallel to see which is a better
fit for ArviZ given current circumstances.&lt;/p&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;This section is a grab bag of tips from my ramp up to Azure. I'll be
updating it as I learn more.&lt;/p&gt;
&lt;h2&gt;Skip the main docs initially&lt;/h2&gt;
&lt;p&gt;One upside of Azure is that it's more flexible than TravisCI, but it's
also more complicated and the docs aren't great. I would advise skipping
to the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/migrate/from-travis?view=azure-devops"&gt;migration&lt;/a&gt;
section of the docs so you can start from known ground, before working
into Azure's complexity.&lt;/p&gt;
&lt;p&gt;I also found this blog post from &lt;a href="https://hynek.me/articles/simple-python-azure-pipelines/"&gt;Hynek Schlawack&lt;/a&gt;
to be quite helpful.&lt;/p&gt;
&lt;h2&gt;Read others implementations&lt;/h2&gt;
&lt;p&gt;It's a lot easier to see the functionality if you look for other people's code.
I referenced &lt;a href="https://github.com/ericmjl/pyjanitor/tree/dev/.azure-pipelines"&gt;PyJanitor's&lt;/a&gt;
implementation as a reference for mine.&lt;/p&gt;
&lt;p&gt;For your aid here's both our &lt;a href="https://github.com/arviz-devs/arviz/blob/master/.travis.yml"&gt;TravisCI yaml file&lt;/a&gt;
and our &lt;a href="https://github.com/arviz-devs/arviz/pull/688/files"&gt;Azure Pipelines&lt;/a&gt;
PR for a one to one comparison.&lt;/p&gt;
&lt;h2&gt;Docs exist for most major languages&lt;/h2&gt;
&lt;p&gt;Specific documentation exists for common workflows in common languages.
For example this &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/python?view=azure-devops"&gt;python&lt;/a&gt;
doc was particularly helpful as ArviZ is written in Python. &lt;/p&gt;
&lt;h2&gt;Azure Pipelines has built in code coverage and test stats&lt;/h2&gt;
&lt;p&gt;Coveralls, codecov, and other provide great free tiers for their services
but integration isn't always straightforward. In ArviZ's case Coveralls
doesn't have an "out of the box" solution for Azure Pipelines yet.&lt;/p&gt;
&lt;p&gt;Luckily Azure Pipelines has a bunch of these services built in as tasks.
Having things in one place is convenient should mean a lesser chance 
of coverage or testing tools breaking.&lt;/p&gt;
&lt;h2&gt;Tasks are like functions&lt;/h2&gt;
&lt;p&gt;I found the docs for tasks to be particularly confusing and it took me a while
to latch onto the central concept, so in attempt to help here's my two liner.   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tasks are like functions, they take inputs and then they "do a thing".
You can add tasks to your CI pipeline by copying a task block into your 
YAML file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here's an example of the &lt;a href="https://github.com/arviz-devs/arviz/blob/cb2a43d3882cbe1fd084d0a863be7bdaeb0a7ab5/azure-pipelines.yml#L85"&gt;Code Coverage task&lt;/a&gt; from ArviZ in context. The official documentation
shows &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index?view=azure-devops"&gt;some screenshots&lt;/a&gt;
, but after hours of clicking around I never found it and ended up realizing
that that WebGUI was not needed.&lt;/p&gt;
&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;We're going to trial both CI pipelines with ArviZ to see which one we should
move forward with. When we know I'll update this blog post. Happy CIing.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Infra"></category></entry><entry><title>Now Available: Reference Sheets</title><link href="/NowAvailableReferenceSheets.html" rel="alternate"></link><published>2019-01-26T00:00:00+00:00</published><updated>2019-01-26T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2019-01-26:/NowAvailableReferenceSheets.html</id><summary type="html">&lt;p&gt;When learning new material I find it challenging immediately recall all
the nuances of a particular term. As a learning strategy I frequently
create flashcards and reference sheets to reinforce my understanding, and 
server as external memory. And for the first time I'm publishing them
for others to use as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When learning new material I find it challenging immediately recall all
the nuances of a particular term. As a learning strategy I frequently
create flashcards and reference sheets to reinforce my understanding, and 
server as external memory. And for the first time I'm publishing them
for others to use as well.&lt;/p&gt;
&lt;p&gt;You can find them in on the blog sidebar under the &lt;em&gt;References&lt;/em&gt; section.&lt;/p&gt;
&lt;p&gt;For now it contains a Bayesian Glossary, a quick reference for common terms
used Bayesian statistics conversation. Coming soon will be a Bayesian Inference
methods cheatsheet, and a Tensorflow cheatsheet as well. Feel free
to contact me if you have a specific request. And happy learning!&lt;/p&gt;</content><category term="Programming"></category><category term="Education"></category><category term="Cheat Sheet"></category></entry><entry><title>Faster blogging with Tmux</title><link href="/TmuxBlogging.html" rel="alternate"></link><published>2018-05-18T00:00:00+00:00</published><updated>2018-05-18T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2018-05-18:/TmuxBlogging.html</id><summary type="html">&lt;p&gt;Writing blog articles is great, but an aspect of it that is not is getting
running all the scripts to get everything setup. To start a blogging
session in no particular order I need to  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traverse to my repository  &lt;/li&gt;
&lt;li&gt;Start an http server  &lt;/li&gt;
&lt;li&gt;Traverse directories again  &lt;/li&gt;
&lt;li&gt;Start pelican  &lt;/li&gt;
&lt;li&gt;Traverse directories …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Writing blog articles is great, but an aspect of it that is not is getting
running all the scripts to get everything setup. To start a blogging
session in no particular order I need to  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traverse to my repository  &lt;/li&gt;
&lt;li&gt;Start an http server  &lt;/li&gt;
&lt;li&gt;Traverse directories again  &lt;/li&gt;
&lt;li&gt;Start pelican  &lt;/li&gt;
&lt;li&gt;Traverse directories more  &lt;/li&gt;
&lt;li&gt;Start vim  &lt;/li&gt;
&lt;li&gt;Start writing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tmux, a terminal multiplexer, makes it easier to switch between the terminals
running these processes, but starting them manually is a pain&lt;/p&gt;
&lt;p&gt;Luckily Tmux supports scripting which makes solving this problem really easy.&lt;/p&gt;
&lt;h1&gt;Tmux script&lt;/h1&gt;
&lt;p&gt;The shell script below runs all the commands needed to start a blogging
environment on my computers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# !/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Small script that sets up blogging environment with one command&lt;/span&gt;

&lt;span class="c1"&gt;# Kill open session&lt;/span&gt;
tmux kill-session -t blog &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# Create new session&lt;/span&gt;
tmux new-session -d -s blog 

&lt;span class="c1"&gt;# C-m is carriage return in tmux&lt;/span&gt;
tmux send-keys &lt;span class="s1"&gt;&amp;#39;source activate blog &amp;amp;&amp;amp; pelican -r -s pelicanconf.py&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C-m&amp;#39;&lt;/span&gt; 

&lt;span class="c1"&gt;# Start http server&lt;/span&gt;
tmux &lt;span class="k"&gt;select&lt;/span&gt;-window -t blog:0
tmux split-window -v 
tmux send-keys &lt;span class="s1"&gt;&amp;#39;cd .. &amp;amp;&amp;amp; python -m http.server&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C-m&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Ready to blog&lt;/span&gt;
tmux new-window -n blog_article -c &lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/content&amp;quot;&lt;/span&gt;
tmux att -t blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking this apart, the first thing to do is ensure that no other tmux session
is already running all the processes I need. This is done by checking
if a session named &lt;code&gt;blog&lt;/code&gt; is running and if so kills it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Kill open session&lt;/span&gt;
tmux kill-session -t blog &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is creating a ession to group all the windows and panes
that will be running the processes. The first done is starting a session
named blog. Next the pelican process is started. &lt;code&gt;send-keys&lt;/code&gt; was used
instead of running the command directly because in tmux if process stops
the pane would close, not a behavior that was desired. &lt;code&gt;C-m&lt;/code&gt; is a carriage
return and instructs tmux to run the command after typing it in, the same
as pressing enter does when manually typing the command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create new session&lt;/span&gt;
tmux new-session -d -s blog 

&lt;span class="c1"&gt;# C-m is carriage return in tmux&lt;/span&gt;
tmux send-keys &lt;span class="s1"&gt;&amp;#39;source activate blog &amp;amp;&amp;amp; pelican -r -s pelicanconf.py&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C-m&amp;#39;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the pelican process ready to generate the site, the next step is to
start a local server to view the blog in a browser&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Start http server&lt;/span&gt;
tmux &lt;span class="k"&gt;select&lt;/span&gt;-window -t blog:0
tmux split-window -v 
tmux send-keys &lt;span class="s1"&gt;&amp;#39;cd .. &amp;amp;&amp;amp; python -m http.server&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C-m&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly we start a new window in the directory where the markdown files 
where for this blog are stored. The final command is attaching the tmux
session to the running terminal to start writing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ready to blog&lt;/span&gt;
tmux new-window -n blog_article -c &lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/content&amp;quot;&lt;/span&gt;
tmux att -t blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And with that were done!&lt;/p&gt;
&lt;h1&gt;Why go through the trouble&lt;/h1&gt;
&lt;p&gt;If the task I want to do is write a blog, every step between is a distraction
and a time waste. This script allows me to bypass all the manual steps
and jump straight into the value add work, writing content to share with you! &lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="MLOps"></category></entry><entry><title>Coding Confusion</title><link href="/CodingConfusion.html" rel="alternate"></link><published>2018-03-12T00:00:00+00:00</published><updated>2018-03-12T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2018-03-12:/CodingConfusion.html</id><summary type="html">&lt;p&gt;Recently I've been teaching more coding than ever, both to coworkers and
to students in my bootcamp. While they're all catching on and getting
results, its made me step back and realize, modern day programming is not
straightforward and with all the various parts, often is just plain confusing.&lt;/p&gt;
&lt;h1&gt;Your …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;Recently I've been teaching more coding than ever, both to coworkers and
to students in my bootcamp. While they're all catching on and getting
results, its made me step back and realize, modern day programming is not
straightforward and with all the various parts, often is just plain confusing.&lt;/p&gt;
&lt;h1&gt;Your first program&lt;/h1&gt;
&lt;p&gt;Python is a popular programming language so it feels simple enough to tell a 
new programmer, "Hey open up a text editor and write the following commands"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point the you feel accomplished, the student feels accomplished, 
but then it quickly wears off as both of you realize this program doesn't
do anything useful. So you start trying to explain the next steps, but where
do you start?&lt;/p&gt;
&lt;h1&gt;Your first productionized program&lt;/h1&gt;
&lt;p&gt;There's data types in Python, such as lists, dictionaries, etc. There's also
the concept of iteration and control loops. But DRY is a thing so you 
quickly have to explain functions, but then you get into scope, and with
Python there's whitespace formatting to cover as well. &lt;/p&gt;
&lt;p&gt;Somewhere in there you fit in a lesson about shell commands, and depending
on whether they're in Windows or a POSIX client you wave your hands about
OS file systems.&lt;/p&gt;
&lt;p&gt;All the code shouldn't be in one file though or it's confusing, so then you explain
Python import machinery, but modules have their own nuances. Somewhere
in there you ramble on about functional design vs OOP.&lt;/p&gt;
&lt;p&gt;Well now the student has something more complex working and they're thrilled
but they want to deploy it. So now you need to teach them about git, but
its also important that they know about isolated environments through
virtualenv, or conda. A conversation ensues about dependencies and why
pinning versions for imported packages might be necessary.&lt;/p&gt;
&lt;p&gt;After all this they finally get their code packaged up and put into a repo.
Their code works and is available  but man it's ugly so you start explaining
the importance of code quality, and how PEP8 is a thing, and why spaces after
single line comments and camel casing are oh so important. A linting
package is installed a bunch of messages appear on the console
after you show they how to run it.&lt;/p&gt;
&lt;p&gt;They didn't know about unit testing though so you go through a lecture on
Test Driven Development. Their monolithic logic needs to be refactored.&lt;/p&gt;
&lt;p&gt;And now their code needs to be deployed, so you ask them hard questions
of how it will be used. If it's going to be a local package did they make
sure it worked across all operating systems and python versions?&lt;/p&gt;
&lt;p&gt;They instead want a webapp, which eliminates most of the issues above, sweet!
You ask them which web framework they want to use but now they need to learn
about WSGIs and API design. An explanation about networking and HTTP response
codes fits in there as well.&lt;/p&gt;
&lt;p&gt;Don't forget the front end though, where they now jump into HTML/CSS/Javascript.
You explain that while most of the concepts above are still relevant, they're
ever so different in another language. And let's hope they don't need a backend
or you'll spend the rest of the day explaining what an ORM is but only
after you teach them bare SQL so they know what's going on under the hood.&lt;/p&gt;
&lt;p&gt;Then you need to talk about Continuous Integration and explain various
deployment strategies from Virtual Machines to Docker Containers to self hosting
versus cloud hosting.&lt;/p&gt;
&lt;p&gt;And if they're doing machine learning be sure to cover at least a semester's
worth of statistics.&lt;/p&gt;
&lt;h1&gt;The Point&lt;/h1&gt;
&lt;p&gt;Going from starter code to production is a lot of steps and for people
that are new to programming it can be very frustrating because the code seemed
to work 10 steps ago. If you're a seasoned
programmer take a second to step back and realize how many moving parts
there are to deploying a "maintainable production ready" app/library,
and how to someone new it can be very difficult to
see the forest for the trees! There's a lot of steps and concepts between Hello World
and a robust library or application. When teaching someone new just take a breath
and remember what it took you to gain that understanding as you guide your
junior programmer. They will appreciate the help.&lt;/p&gt;</content><category term="Programming"></category><category term="Visualization"></category></entry><entry><title>A review of Udacity's Machine Learning Nanodegree</title><link href="/UdacityMLND.html" rel="alternate"></link><published>2018-01-04T00:00:00+00:00</published><updated>2018-01-04T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2018-01-04:/UdacityMLND.html</id><summary type="html">&lt;p&gt;I recently finished the Udacity Machine Learning Nanodegree and wanted to share
the following thoughts on my experience.&lt;/p&gt;
&lt;p&gt;If you haven't read my &lt;a href="/DSGuide.html"&gt;Review of Data Science Programs&lt;/a&gt;
I would do so first, to get a general explanation of the other types
of machine learning curriculum.&lt;/p&gt;
&lt;h1&gt;The rundown&lt;/h1&gt;
&lt;p&gt;The Machine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently finished the Udacity Machine Learning Nanodegree and wanted to share
the following thoughts on my experience.&lt;/p&gt;
&lt;p&gt;If you haven't read my &lt;a href="/DSGuide.html"&gt;Review of Data Science Programs&lt;/a&gt;
I would do so first, to get a general explanation of the other types
of machine learning curriculum.&lt;/p&gt;
&lt;h1&gt;The rundown&lt;/h1&gt;
&lt;p&gt;The Machine Learning Nanodegree is formatted in the previous style of Udacity
nanodegrees where you're charged 200 dollars a month until all seven projects
are completed. The projects themselves range in complexity, starting from
a basic linear regression, to clustering, to more challenging ones
such as a reinforcement learning implementation, and a CNN implementation.  &lt;/p&gt;
&lt;p&gt;The final portion is a capstone project where you are allowed to perform
a machine learning project on any dataset of your choosing.&lt;/p&gt;
&lt;p&gt;Overall I found the Machine Learning Nanodegree to be pretty comprehensive.
Nearly all machine learning topics were covered. Expect this Nanodegree
to take quite a bit of time, it's challenging from both a code perspective
and from a mathematical understanding perspective. The knocks I have 
against the program are the level of hand holding, sometimes a bit too much
code is implemented for you, and if you're lazy you can get away with just
filling in the blanks without understanding the whole picture. However
if you're diligent and spend time understanding all the code, even the 
portions implemented for you, you'll come out with a comprehensive understanding
of how to implement Machine Learning projects.&lt;/p&gt;
&lt;p&gt;If you're lightly interested in Machine Learning I would recommend Andrew Ng's
Coursera course over this one. But if you'd like to dive a bit deeper
and have money to spare you can't go wrong with this one as well.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Education"></category></entry><entry><title>Programming as a Non Programmer - Part 3</title><link href="/NonProgrammerP3.html" rel="alternate"></link><published>2017-01-23T00:00:00+00:00</published><updated>2017-01-23T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2017-01-23:/NonProgrammerP3.html</id><summary type="html">&lt;p&gt;This is Part 3 in a series about how learning how to program could affect
your career and some of the experiences I've had with programming in mine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/NonProgrammerP1.html"&gt;Intent of series and introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/NonProgrammerPart2.html"&gt;What Programming as a Non Programmer means&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why not to be a programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Why you shouldn't learn …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;This is Part 3 in a series about how learning how to program could affect
your career and some of the experiences I've had with programming in mine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/NonProgrammerP1.html"&gt;Intent of series and introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/NonProgrammerPart2.html"&gt;What Programming as a Non Programmer means&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why not to be a programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Why you shouldn't learn to program&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.google.com/search?q=you+should+learn+to+program"&gt;A quick Google Search&lt;/a&gt;
shows hundreds of sites that proclaim you should learn how to program.
I've personally doubled my salary learning how to program and it was a strong
factor in SpaceX deciding to hire me. However this does not mean you should 
learn to program and there are many cases in which I have recommended that people
don't learn programming.  &lt;/p&gt;
&lt;p&gt;Some reasons that I read, or I hear, usually follows the lines of  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Programming is a hot skill&lt;/li&gt;
&lt;li&gt;Programmers make more money&lt;/li&gt;
&lt;li&gt;My boss will give me a raise if I learn how to program&lt;/li&gt;
&lt;li&gt;Computers are everywhere in everyday life, you should learn how to program them &lt;/li&gt;
&lt;li&gt;You'll get to work wherever you want, whenever you want &lt;/li&gt;
&lt;li&gt;Founder XYZ of startup ABC made a billion dollars programming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/laurencebradford/2016/06/20/why-every-millennial-should-learn-some-code/2/#"&gt;"If you're an English Major ... or didn't go to college .. or were raised by Wolves"&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These pitches are echoed all over the place, even from Forbes magazine.
A lot of times it's accompanied by
a pitch to then pay money for a bootcamp class, or book, or subscription
to an ad sponsored email list. In these cases there's a clear reason why
you're told to program, so someone else can earn money.&lt;/p&gt;
&lt;p&gt;This is not to say there aren't altruistic people teaching you how to program.
There are plenty of well-meaning people that also give the same advice,
but again I strongly believe this advice does not universally apply.&lt;/p&gt;
&lt;h1&gt;Debunking the reasons&lt;/h1&gt;
&lt;h2&gt;Programming is not a get rich quick scheme&lt;/h2&gt;
&lt;p&gt;If you're learning programming with the sole intent of making money easily,
or getting a "work from anywhere" lifestyle, consider the economics 
of this. If programming was easy, if anyone learn it in 6 months, if you can
work remotely, why would companies pay &lt;strong&gt;you&lt;/strong&gt; a nice salary to do it? When I say
you, I mean you, versus a person in India, or Mexico, who can work for one 
tenth of the cost. Or you versus the high schooler down the street that
just graduated. Cal Newport writes an excellent blog series, one of the points
being that to be valuable, you must provide unique value to someone else.
What will make you a more valuable programmer versus anybody else?&lt;/p&gt;
&lt;h2&gt;The fact that computers are commonplace is not a compelling argument to program&lt;/h2&gt;
&lt;p&gt;It's true, computers are becoming and increasingly integral part of life,
but just because they're around isn't itself a compelling reason to
learn how to program. There are many objects that are common place,
such as cars and houses but rarely do you see the advice
"You live in a house, you should build your own", or "You use your car, you
should learn how to make your own transmission". &lt;/p&gt;
&lt;h2&gt;Learning how to program doesn't teach you everything about computers work&lt;/h2&gt;
&lt;p&gt;Conversely programming itself is an abstraction of physical transistors or byte code,
but usually when people talk about "learning programming" they're talking about
an arbitrary middle layer. Of course learning to program is a step
in learning how computers work, but it's like saying that if you learn
how to change your oil you understand how your car works.&lt;/p&gt;
&lt;h2&gt;"The skills you learned before are not as valuable as Programming"&lt;/h2&gt;
&lt;p&gt;I commonly read about how "English Majors" should learn programming.
This one bothers me the most because implies programming is a superior
skillset to whatever a person already knows. I feel like approach
is largely negative, and even if it were true, is not a good way to convince 
people to program. I feel that people should be interested in an activity
for its merits, rather than being scared into it by being told that 
their previous choices were largely mistakes.&lt;/p&gt;
&lt;h1&gt;Past the flashy titles&lt;/h1&gt;
&lt;p&gt;If you look past click bait titles there's some underlying truths to 
how people generate value from their skills.&lt;/p&gt;
&lt;h2&gt;Writing a program is easy, mastering programming is hard&lt;/h2&gt;
&lt;p&gt;I write English. There are other people that
also write English such as JK Rowling, Tom Clancy, and J.R.R. Tolkien.
Yet those people were paid millions of dollars for their words. I doubt
anyone will pay me for the words on this  blog. The difference is those people have mastered
the English language in their own unique way through years of hard work and practice.&lt;/p&gt;
&lt;p&gt;Learning to do program isn't free, even if Youtube videos or books cost $0 dollars
online you'll need to spend many hours of your life focusing on learning
programming (or any other skill really). &lt;/p&gt;
&lt;h2&gt;Programming skills by themselves are rarely valued&lt;/h2&gt;
&lt;p&gt;Pay attention to the skillsets of the people that earned value from
programming, usually people like Bill Gates or Mark Zuckerberg are examples.
Those people were good at programming, but they were also good at other things,
especially leadership and figuring out what people wanted. A good programmer
that can't communicate or work with others usually does not have a great life.
An unfortunate example of this is Phil Katz, who was an extraordinary programmer,
but had trouble working with others and arguably did not have an ideal life in
his later days. Strongly consider what skills you have that you can work on 
outside of programming constantly.&lt;/p&gt;
&lt;h1&gt;The Summary&lt;/h1&gt;
&lt;p&gt;There's a lot of good reasons to learn how to program, but the reasons
above in my opinion are not the right ones. If you're deciding to program
I would carefully evaluate if you're being swayed by arguments
such as the one above. If so think hard about whether learning programming
is right for you. In the next post I'll talk about reasons why learning
programming can be beneficial.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Programming as a Non Programmer - Part 2</title><link href="/NonProgrammerPart2.html" rel="alternate"></link><published>2017-01-16T00:00:00+00:00</published><updated>2017-01-16T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2017-01-16:/NonProgrammerPart2.html</id><summary type="html">&lt;p&gt;This is Part 2 in a series about how learning how to program could affect
your career and the experiences I've had with programming in mine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/NonProgrammerP1.html"&gt;Intent of series and introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What Programming as a Non Programmer means&lt;/li&gt;
&lt;li&gt;Why not to be a programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What Programming without being a Programmer …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;This is Part 2 in a series about how learning how to program could affect
your career and the experiences I've had with programming in mine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/NonProgrammerP1.html"&gt;Intent of series and introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What Programming as a Non Programmer means&lt;/li&gt;
&lt;li&gt;Why not to be a programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What Programming without being a Programmer means&lt;/h1&gt;
&lt;p&gt;Programmer, or coder, is a pretty broad term these days but 
in this series we'll use the following split to differentiate 
programmers from non programmers&lt;/p&gt;
&lt;p&gt;I would describe the split as  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;People that get paid primarily for their skill to write code (Programmers)&lt;/li&gt;
&lt;li&gt;People that get paid primarily to do something that isn't write code (Non Programmers)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are people at all companies at which I've been employed which fit into category one,
they are given software programs and the expectation of their role 
is to write code of some sort that solves a business problem. I consider
these people to be programmers.&lt;/p&gt;
&lt;p&gt;I fall into the second category, my position is more dependent on domain
expertise of supply chains and manufacturing processes. My coworkers
only know very rudimentary programming, Excel sheets and
basic SQL at most. The expectation of our job is make the manufacturing 
execution more efficient. I do write programs at work, but I'm a Non
Programmer&lt;/p&gt;
&lt;p&gt;This is what Programming without being a Programmer means. Essentially
Programming (as a technical activity) without being a Programmer (in job title).&lt;/p&gt;
&lt;h1&gt;Why split hairs?&lt;/h1&gt;
&lt;p&gt;While it seems like a subtle difference in theory, but in practice it leads
to major organizational differences. Group 1 is valued by the company by their
ability to produce robust technical solutions that solve major business
problems. Because they are valued for this the specific focus this group
the people in this group are the ones we hear about all the time,
the one that hires people that can implement FizzBuzz
blindfolded,  the ones that setup continous integration environments, or
are now using Docker containers to increase uptime. This organization focuses
on hiring people that have lots of experience in Computer Science, &lt;em&gt;Programmers&lt;/em&gt;
as defined above. If you're in this group learning to program
is very much tied to your ability to produce value, and your organization
will more than likely support increasing your programming ability through paid trainings,
finding you other programming colleagues, and investing in programming resources
for you, like really nice computers. Simply put if these programmers can't program they're 
probably going to get fired. Learning to program has a very obvious and 
clear correlation with your ability to produce value to society, and improve
your life condition.&lt;/p&gt;
&lt;p&gt;Group 2 is all the other organizations, the accounting department, building maintenance 
department, purchasing department, or sales department.&lt;/p&gt;
&lt;p&gt;These people are valued by their ability to do something that's not write code,
for example purchasing departments are typically valued on their ability
to procure materials and services for a business as cheaply and effectively
as possible. Facilities maintenance is usually valued on their ability
to keep physical buildings as functional as possible by doing things
like changing lights or maintaining plumbing in restrooms. Quite clearly these groups 
are not valued on their ability program. A plumber is valued on his or her
ability to fix plumbing issues. In their role they won't primarily be evaulated
on their programming ability, if at all. &lt;/p&gt;
&lt;p&gt;If you're in this group learning to program might do nothing for your career,
and in fact &lt;strong&gt;learning to program might be a complete waste of time and effort.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;With that distinct made in the next two posts will cover my opinion the
upsides and downsides as programming as a Non Programmer.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Programming as a Non Programmer - Part 1</title><link href="/NonProgrammerP1.html" rel="alternate"></link><published>2017-01-09T00:00:00+00:00</published><updated>2017-01-09T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2017-01-09:/NonProgrammerP1.html</id><summary type="html">&lt;p&gt;This is Part 1 in a series about how learning how to program could affect
your career and some of the experiences I've had with programming in mine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intent of series and introduction&lt;/li&gt;
&lt;li&gt;What Programming as a Non Programmer means&lt;/li&gt;
&lt;li&gt;Why Programming could be beneficial for your life and career …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is Part 1 in a series about how learning how to program could affect
your career and some of the experiences I've had with programming in mine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intent of series and introduction&lt;/li&gt;
&lt;li&gt;What Programming as a Non Programmer means&lt;/li&gt;
&lt;li&gt;Why Programming could be beneficial for your life and career&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;An Introduction&lt;/h1&gt;
&lt;p&gt;Whether you &lt;a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=you%20should%20learn%20to%20code"&gt;should&lt;/a&gt;, 
&lt;a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=why%20you%20should%20learn%20to%20code"&gt;or should not&lt;/a&gt;
learn to program (or code) is a pretty hotly contested topic. The opinions
usually focus on whether you quit your current career and focus on 
programming as a full time job, but there is another option of learning
programming on the side to supplement your current career. I'll be writing about
that.&lt;/p&gt;
&lt;p&gt;I'm not going to try to sway you one way or another, but I will give you
my thoughts and let you form your own decision. I'm writing this
so others trying to make a reasoned decision can consider my experience
if they find it useful. Although I've been exposed to computers
my entire life, I really picked it up professionally 5 years ago sort
of unintentionally.  &lt;/p&gt;
&lt;p&gt;Off the bat I'll say that learning to program on the side has been extremely
beneficial for my career. I've been able solve problems in my domain
that others couldn't, even full time "trained" programmers, and I've been able
to gain much more flexibility and satisfaction out of my job.&lt;/p&gt;
&lt;p&gt;However it wasn't the simplest thing, I wasn't able to do it in "24 hours"
or within one bootcamp, or even three. Even so others I knew didn't make
any traction at all, and learning to program really did nothing to benefit
their career. Even with my positive experience, discussions with others
have led me to advise them to avoid programming.
Programming isn't a silver bullet to success, even myself
typing right now I know programming alone is not going to be able to magically
be the one thing that makes everything awesome at my job. But its undeniable
that it's a skill, both as a hobby and as a marketable ability.&lt;/p&gt;
&lt;h1&gt;What to expect&lt;/h1&gt;
&lt;p&gt;In the upcoming articles I'll talk about some of the benefits, but also
challenges, I faced when attempting to do this, how I was able work the
new skills into my current career and how interactions with full time
developers worked and didn't work. In the next post I'll specifically
talk about what I mean with the title&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Using Linux</title><link href="/UsingLinux.html" rel="alternate"></link><published>2016-11-27T00:00:00+00:00</published><updated>2016-11-27T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-11-27:/UsingLinux.html</id><summary type="html">&lt;p&gt;Recently I decided to start using Linux again as a primary OS on my laptop. I'm
doing this because I believe Linux is the best OS to solve my problems and 
I'm committed on sticking with it this time. If you're deciding to do this I'll
walk you through my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I decided to start using Linux again as a primary OS on my laptop. I'm
doing this because I believe Linux is the best OS to solve my problems and 
I'm committed on sticking with it this time. If you're deciding to do this I'll
walk you through my choice to hopefully help eliminate some of your confusion
and avoid some of the mistakes I made.&lt;/p&gt;
&lt;h1&gt;Some History&lt;/h1&gt;
&lt;p&gt;This isn't my first time making this decision. For the past 20 years I've been
back and forth between Windows and Linux as my primary OS. Through the years
I've installed Mandrake Linux, RedHat, Fedora Core, Ubuntu, Backtrack and most
recently Arch Linux.  Here's some of the lessons I've learned.&lt;/p&gt;
&lt;h2&gt;Use good hardware for a good experience&lt;/h2&gt;
&lt;p&gt;I used to install Linux on laptops and desktops that were my "retired" devices. 
It didn't help that the computers I used to buy were already budget models when
they were new. While it's true Linux can be lightweight and can run on nearly
all hardware the experience will be hampered. &lt;/p&gt;
&lt;h2&gt;Be prepared to do some hardware configuration&lt;/h2&gt;
&lt;p&gt;When buying a Windows laptop the OEM configures everything to make it "just work"
hiding stuff like driver installation and configuration from you.
If you install a fresh copy of Windows you'll quickly see what I mean, things
like your display, sound, and wireless likely will require driver installations
and multiple reboots. And this is with an OEM that has a nice website with
all drivers easily available and dedicated support&lt;/p&gt;
&lt;p&gt;Linux is no different, you'll need to spend some time working through
peripherial installation. Expect this going in.&lt;/p&gt;
&lt;h2&gt;Just pick a distribution and go with it when first starting&lt;/h2&gt;
&lt;p&gt;With OSX and Windows you usually just use the latest version. For those being
nitpicky sure you could use an older version, and sure there's Windows Server
and variants like that, but for an end user there really is just one obvious choice.&lt;/p&gt;
&lt;p&gt;This isn't the case with Linux, there's numerous variations. If you're 
first starting just quickly pick the one that suits you the best to get 
familiar. Virtual Machines are helpful here as well so you can test 
many flavors without needing to go through the installation hassle. But don't
spend too much time worrying about it, just get started.&lt;/p&gt;
&lt;h2&gt;Don't feel like you can't look under the hood&lt;/h2&gt;
&lt;p&gt;Windows and OSX are closed source, and it's impossible and sometimes actively
discouraged to figure out what the OS is doing. Linux is the complete
opposite, as it's actively encouraged to learn the ins and outs. There's
a lot to learn but there's a helpful community to guide you through it. &lt;/p&gt;
&lt;h2&gt;Dual booting is doable but adds complexity&lt;/h2&gt;
&lt;p&gt;A tempting option is to dual boot your computer, so you can always switch back
to Windows with a quick reboot. This is certainly possible, and not difficult
to setup, but if you're new to working with computers at this level it becomes
all too easy to break things and subsequently difficult to repair. It's
my opinion that your life will be much easier initially if you just dedicate machine
to Linux. If you don't have two computers then go with a dual boot but if you
can spare the money and are dedicated to learning Linux a dedicated machine
will smooth the process.&lt;/p&gt;
&lt;h2&gt;Some applications just require Windows which makes switching costs higher&lt;/h2&gt;
&lt;p&gt;If you were wondering why I kept switching back and forth it was this.
Previously I needed programs like Solidworks to do my job. Even with 
Wine things just didn't work well. Unfortunately this also meant that I would
end up just spending more time with Windows and neglect Linux. The dual
boot option works here, but it does mean Linux will likely remain your
secondary computer if you need Windows programs in your daily tasks.&lt;/p&gt;
&lt;h1&gt;Get started&lt;/h1&gt;
&lt;p&gt;Hopefully this provides answers for some basic questions. I'll be
writing followup posts on why I picked Linux this time and an abbreviated tutorial
for installing Arch Linux.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>SVG Rotation and Reusability</title><link href="/RotationAndReusability.html" rel="alternate"></link><published>2016-10-15T10:20:00+00:00</published><updated>2016-10-15T10:20:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-10-15:/RotationAndReusability.html</id><summary type="html">&lt;p&gt;SVGs aren't always the most straightforward to work it and also are deceptively
simple but as you'll get more familiar with the API you'll be able to
combine SVG "methods" to more easily get what you need.&lt;br&gt;
In this post we'll cover rotation and reusability of SVG elements as well …&lt;/p&gt;</summary><content type="html">&lt;p&gt;SVGs aren't always the most straightforward to work it and also are deceptively
simple but as you'll get more familiar with the API you'll be able to
combine SVG "methods" to more easily get what you need.&lt;br&gt;
In this post we'll cover rotation and reusability of SVG elements as well
as the practical problem this solved for me&lt;/p&gt;
&lt;h1&gt;The Backstory&lt;/h1&gt;
&lt;p&gt;At SpaceX I'm currently writing a program that will calculate a timeline
of activities and am using D3 for the visualization portion. For this particular
business process there are activities, things that happen over a period of time,
and milestones, significant dates that mark the completion of a series of activities&lt;/p&gt;
&lt;h1&gt;Gantt Charts&lt;/h1&gt;
&lt;p&gt;Schedules are nothing new, over a 100 years ago 
&lt;a href="https://en.wikipedia.org/wiki/Gantt_chart"&gt;the Gantt Chart&lt;/a&gt; was developed
to visualize and communicate project timelines
&lt;img alt="test" src="https://upload.wikimedia.org/wikipedia/commons/0/0b/ConceptDraw_Project_Gantt_Chart.png"&gt;&lt;/p&gt;
&lt;p&gt;There's now numerous visual encodings but the two that are most used are
the rectangle, displaying activity duration, and diamonds, which signify milestones
or completion times of important events.
&lt;div id="unclipped"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h1&gt;Creating a diamond&lt;/h1&gt;
&lt;p&gt;SVG supports a number of 
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes"&gt;basic shapes&lt;/a&gt;
Rectangles are one of these and creating one just requires easily understood parameters
such as x,y location of te top left corner and width and height.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They can be represented in either of the formats above, the only difference
being the closing block for the svg element.The resulting SVG looks like this.
Seemingly unspectacular but actually pretty cool for only 4 lines of code.&lt;br&gt;
&lt;svg&gt;
  &lt;rect x="10" y="10" height="20" width="40"/&gt;
  &lt;rect x="20" y="40" height="20" width="40"&gt;&lt;/rect&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;Our next challenge is representing a diamond. There is no basic shape for a
diamond in the SVG library. Given that we can't just "tell" the renderer
to draw a diamond we could instead manually "draw" the lines like this.  &lt;/p&gt;
&lt;p&gt;&lt;svg width=100 height=100&gt;
  &lt;path d="M50 15 L15 50 L50 85 L85 50 Z"&gt;&lt;/path&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;But this feels like a bit much, we really just want a diamond.&lt;/p&gt;
&lt;h1&gt;Rotation&lt;/h1&gt;
&lt;p&gt;Taking a step back though if we think about it a diamond really is just 
a rotated rectangle. Luckily there is a simple method to rotate elements in SVGs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;transform = &amp;quot;rotate(degrees, x,y)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the string above degrees are the degree of rotation, and x and y are
rotation center. If not specified the rotation center defaults to the origin
of the svg.&lt;/p&gt;
&lt;p&gt;Let's go through an example. Below is a basic rectangle like we saw above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;svg width ="100" height ="100"&gt;
  &lt;rect x="25" y="25" height="50" width="50"&gt;&lt;/rect&gt;
&lt;/svg&gt;  &lt;/p&gt;
&lt;p&gt;If we specify the rotation as so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50 &amp;quot;&lt;/span&gt;&lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rotate(45, 50,50)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we get the diamond with much less work!&lt;/p&gt;
&lt;p&gt;&lt;svg width ="100" height ="100"&gt;
  &lt;rect x="25" y="25" height="50" width="50" transform="rotate(45, 50,50)"&gt;&lt;/rect&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;We had to specify the center of the relative to the SVG origin however. If we
translate the diamond slightly, without changing the rotate x and y coordinates
we end up with effects like what you see below. We still got a diamond
but it's not at the coordinates we wanted it to be.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rotate(45, 50,50)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;svg width ="400" height ="400"&gt;
  &lt;rect x="200" y="200" height="50" width="50" fill="blue"&gt;&lt;/rect&gt;
  &lt;rect x="200" y="200" height="50" width="50" transform="rotate(45, 50,50)"&gt;&lt;/rect&gt;
  &lt;circle cx="50" cy="50" r="10" fill="red"&gt;&lt;/circle&gt;
&lt;/svg&gt;
The blue square and the black diamond share the same x and y attribute, but since
the center of rotation is at red dot, the diamond isn't in the position as the
black square.&lt;/p&gt;
&lt;h1&gt;SVG Reusability&lt;/h1&gt;
&lt;p&gt;SVG has another trick up it's sleeve though. Take a guess what the following
SVG will look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myshape&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;svg width ="100" height ="100"&gt;
  &lt;defs&gt;
      &lt;rect id="myshape" x="0" y="0" height="50" width="50"/&gt;
  &lt;/defs&gt;
&lt;/svg&gt;
If you guessed nothing you were right. However there is geometry defined
and similar to the &lt;a href="/clippaths.html"&gt;clip paths&lt;/a&gt; tutorial it's wrapped
in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs"&gt;defs&lt;/a&gt; tags.&lt;/p&gt;
&lt;p&gt;Anything in defs tags can be reused by use of the "use" tag and referencing
the id of the element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myshape&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#myshape&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;svg width ="100" height ="100"&gt;
  &lt;defs&gt;
      &lt;rect id="myshape" x="0" y="0" height="50" width="50"/&gt;
  &lt;/defs&gt;
  &lt;use xlink:href="#myshape" x="10" y="10"/&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;So for our diamond we can declare once and then use it anywhere with minimal effort.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myshape&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#myshape&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;svg width ="200" height ="200"&gt;
  &lt;defs&gt;
      &lt;rect id="diamond" height="50" width="50" transform="rotate(45)"&gt;
  &lt;/defs&gt;
  &lt;use xlink:href="#diamond" x="50" y="50"/&gt;
  &lt;use xlink:href="#diamond" x="100" y="100"/&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;h1&gt;In Closing&lt;/h1&gt;
&lt;p&gt;Declaring elements in the defs tag is how DRY, Don't Repeat Yourself, is 
implemented in SVGs. As you can see they're also extremely useful in
very practical situations. If you have any questions feel free to contact
me either through my Linkedin or Github. I hope this was helpful!&lt;/p&gt;</content><category term="Programming"></category><category term="Visualization"></category></entry><entry><title>Writing good software requires you to have an opinion</title><link href="/OpinionatedSoftware.html" rel="alternate"></link><published>2016-10-03T10:20:00+00:00</published><updated>2016-10-03T10:20:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-10-03:/OpinionatedSoftware.html</id><summary type="html">&lt;p&gt;If you want to write good software I would argue that you have to develop a
a style based on experience partially based on experience but also with a 
large dose of personal opinion. In fact I would argue go as far to argue that
if you can't develop an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you want to write good software I would argue that you have to develop a
a style based on experience partially based on experience but also with a 
large dose of personal opinion. In fact I would argue go as far to argue that
if you can't develop an opinion your growth a developer will be stunted.&lt;/p&gt;
&lt;p&gt;When you're starting to learn how to program, especially if you don't have a
mentor or aren't working in a team, you likely won't have a strong guide for code style.
But you want to learn how to write software so you just have to start
But without prior experience how do you structure your code?
If you're anything like me this means you'll
end up reading a lot of blog posts, Stack Overflow answers, and books to 
find "the best way" of doing things.&lt;/p&gt;
&lt;h1&gt;Some languages require you to opine right off the bat&lt;/h1&gt;
&lt;p&gt;Languages like Perl &lt;a href="https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it"&gt;leave it up to you&lt;/a&gt;.
There really isn't a best way of doing things, so each programmer is left
with a choice of what they think is best. But as a learner this makes
things quite difficult as you'll have to both learn to read each style
and develop your own fairly early in your learning.&lt;/p&gt;
&lt;h1&gt;Sometimes the language has "one obvious way"&lt;/h1&gt;
&lt;p&gt;In Python there's "one obvious way" to do things. As a beginner this is great.
This means you can now google away and always find "the best way" to do things.&lt;/p&gt;
&lt;p&gt;For example if we want to print each letter I've seen a lot of beginners 
write this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Baz&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great it works.
But now you wan to make your code better and you want to see how the experts 
structure their code. To do so you go out and pick up two books
"Writing Idiomatic Python" and "Effective Python".&lt;/p&gt;
&lt;p&gt;You read through and you see Item 10 in Idiomatic Python "Prefer Enumerate over Range"
and items 1.2.1 and 1.2.2 in "Writing Effective Python".&lt;/p&gt;
&lt;p&gt;"Now I know to iterate directly over an array rather over a range and index"
you say, and quickly write what almost everyone will agree is better or
more "Pythonic".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python you can actually get really far this way, as a community there are
a ton of "almost always" best practices for doing things and the Python
language does a great job encouraging this. For me it became routine to
figure out what I needed to do, then google "best way of doing X" for a while.&lt;/p&gt;
&lt;h1&gt;But there isn't always "one obvious way"&lt;/h1&gt;
&lt;p&gt;Let's say we have a new problem now. We now want to write a program that makes
requests to websites until it receives a 404 error. If they all work we want
a message telling us so.&lt;/p&gt;
&lt;p&gt;Here's out first attempt using the requests library. Writing Idiomatic Python
suggests this structure saying that "even if the for structure isn't clear,
our code is clear enough to teach them"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;facebook.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cnn.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
   &lt;span class="n"&gt;reqest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request Failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;All good&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However if we take a look at what Effective Python suggests using this approach&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;facebook.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cnn.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
   &lt;span class="n"&gt;reqest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request Failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;All good&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but this is the exact opposite of what Idiomatic Python suggests. In fact
these two books completely disagree with each other, each saying each others
method is unreadable and harmful&lt;/p&gt;
&lt;h1&gt;It gets worse&lt;/h1&gt;
&lt;p&gt;Once you start moving into larger projects you'll find many differing opinions.
Want a web framework? Well there's django, flask, pyramid and pecan.
Unit Testing? Pick between Nose, Nose2, pytest, unittest, and doctest.
Even for this statically generated site there's Nikola, Pelican, Hyde&lt;/p&gt;
&lt;p&gt;Let's not even get started with Javascript.
Hell, even with simple text editors there's Atom, Sublime, vim, emacs, etc&lt;/p&gt;
&lt;h1&gt;Why you need to develop an educated opinion fast&lt;/h1&gt;
&lt;p&gt;If you can't make an educated choice quickly you'll never get anything done,
instead switching back and forth between whatever the last person told you
was the best way to do things&lt;/p&gt;
&lt;h1&gt;How to develop an educated opinion&lt;/h1&gt;
&lt;p&gt;Unfortunately there really isn't a way to do this other than take in the advice
from others, but then also apply them and see what works best for you. When
reading code or taking feedback pay close attention to why the person is arguing
for or against a method but think about how it fits into what you know and
what you need to get done.&lt;/p&gt;
&lt;h1&gt;But it's worth it&lt;/h1&gt;
&lt;p&gt;Watch &lt;a href="https://www.youtube.com/watch?v=bpZS9ehw98"&gt;this&lt;/a&gt; of Kenneth Reitz
the developer of the Requests library, which also happens to be the most
popular Python package of all time. Notice how opionated he is about the state
of other libraries and what he values in software. If Kenneth had tried
to design a library that made everyone happy, it likely wouldn't have made
anyone happy.  &lt;/p&gt;
&lt;h1&gt;In Closing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There rarely is one right way to do things. If you keep trying to search for one
you'll never get anything done.&lt;/li&gt;
&lt;li&gt;Take the time to develop your own opinion&lt;/li&gt;
&lt;li&gt;Do this taking the time to understand others opinions by taking in information&lt;/li&gt;
&lt;li&gt;But also develop your own by doing things&lt;/li&gt;
&lt;li&gt;You'll never get everyone to agree with your approach but that doesn't mean it's wrong&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Modifying a Pelican Template</title><link href="/ModifyingATemplate.html" rel="alternate"></link><published>2016-07-10T00:00:00+00:00</published><updated>2016-07-10T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-07-10:/ModifyingATemplate.html</id><summary type="html">&lt;p&gt;After deciding to use a &lt;a href="/WhyIChoseaSSG.html"&gt;Statically Generated Site&lt;/a&gt;
I needed to pick a template. Trouble was that I had already found a template for
WordPress that I had liked.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WordPressTheme" src="/images/PelicanTemplate/WordPressTemplate.png"&gt;
&lt;em&gt;The Wordpress theme&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Luckily there was a &lt;a href="https://github.com/getpelican/pelican-themes"&gt;GitHubRepo&lt;/a&gt;
that had many prexisting themes and even more luckily there was one 
that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After deciding to use a &lt;a href="/WhyIChoseaSSG.html"&gt;Statically Generated Site&lt;/a&gt;
I needed to pick a template. Trouble was that I had already found a template for
WordPress that I had liked.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WordPressTheme" src="/images/PelicanTemplate/WordPressTemplate.png"&gt;
&lt;em&gt;The Wordpress theme&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Luckily there was a &lt;a href="https://github.com/getpelican/pelican-themes"&gt;GitHubRepo&lt;/a&gt;
that had many prexisting themes and even more luckily there was one 
that was already a &lt;a href="https://github.com/jvanz/pelican-hyde"&gt;close fit&lt;/a&gt;
&lt;img alt="WordPressTheme" src="/images/PelicanTemplate/PelicanHydeTheme.png"&gt;
&lt;em&gt;The Pelican-Hyde theme&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;There were some things I didn't like though. I didn't like the sidebar size,
the links to social media, and the font, or that the sidebar was focused
on the bottom. Additionally I wanted the horizontal line element from the 
WordPress theme. Given that this theme was so close though, rather than
start from scratch I decided to modify the existing one instead.&lt;/p&gt;
&lt;h1&gt;Peeking under the hood&lt;/h1&gt;
&lt;p&gt;Given that this is a Statically Generated Site everything you see can be
traced back to a single file quite easily. However given this is still web
technology there is still the possibility that the formatting could be coming
from an html file and multiple css stylesheets. Bluntly put figuring out why
certain things are laid out a certain way, or why they're a certain color, can
still be a pain. Luckily though the Chrome Team developed awesome dev tools
which make figuring out what's going on much easier
&lt;img alt="ChromeDevTools" src="/images/PelicanTemplate/ChromeDevTools.png"&gt;
&lt;em&gt;Chrome Dev Tools&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the screenshot above you can see a couple of awesome things. One is that
by highlighting over an element I can both see the code in the Document
Object Model and the full tree of CSS stylers that are changing it's appearance
and position. While I won't go into all the tools here, there are numerous
other tabs and functions to dive even deeper into more complex applications.
However in generality using the dev tools is what I used in the following
steps to deconstruct the Wordpress and Pelican themes&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChromeDevTools" src="/images/PelicanTemplate/CSSModifications.png"&gt;
&lt;em&gt;Adding a Dark Green Class&lt;/em&gt;&lt;br&gt;
For the most part this modifying the CSS to reflect the styles we want.
For instance above an addition was made the CSS style sheets to allow for
a Dark Green class that uses the same green in the original WordPress Theme.&lt;/p&gt;
&lt;h1&gt;Modifying the template&lt;/h1&gt;
&lt;p&gt;I also wanted links to be added for the static pages to include pages 
such as About This Blog and References. Luckily Pelican decided to use 
the jinja2 templating engine which is simple to use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Template Modifications" src="/images/PelicanTemplate/TemplateModification.png"&gt;&lt;/p&gt;
&lt;p&gt;By adding the above loop in white, links will now be added for each sidebar link.&lt;/p&gt;
&lt;h1&gt;Why does this matter for Data Science&lt;/h1&gt;
&lt;p&gt;As a data scientist part of the job is being able to present information
seamlessly and quickly. The Web was built for this 
Using it to be able to quickly and effectively use this medium is an extremely
useful skill to have in your communication toolset, and things like
the Chrome Devtools and jinja2 templating engine are extremely powerful
to template and style reusable webpages for reports and internal facing
dashboards.&lt;/p&gt;</content><category term="Programming"></category><category term="Tutorial"></category></entry><entry><title>Why a Statically Generated Site</title><link href="/WhyIChoseaSSG.html" rel="alternate"></link><published>2016-07-10T00:00:00+00:00</published><updated>2016-07-10T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-07-10:/WhyIChoseaSSG.html</id><summary type="html">&lt;p&gt;Initially when I decided to start this blog I started with what I already
had a WordPress blog. Wordpress had served me well in the past, especially
when I had a more limited programming background. Given the needs of this blog
however, a Statically Generated Site, turned out to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Initially when I decided to start this blog I started with what I already
had a WordPress blog. Wordpress had served me well in the past, especially
when I had a more limited programming background. Given the needs of this blog
however, a Statically Generated Site, turned out to be a better choice.&lt;/p&gt;
&lt;h2&gt;Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;Wordpress syntax highlighting was ok, but not the best. Given that there 
would be a lot of code on this blog this was a huge knock against the WordPress
environment&lt;/p&gt;
&lt;h2&gt;Difficulty in supporting Javascript/D3&lt;/h2&gt;
&lt;p&gt;There is a plugin to support d3 in Wordpress but its docs only list
3.3, and given that 3.5 has been around for a while, and that 4.0 just got released,
it was evident that trying to embedded visualizations or javascript programs
into the blog wouldn't be straightforward&lt;/p&gt;
&lt;h2&gt;Latex support is limited&lt;/h2&gt;
&lt;p&gt;It seems that in WordPress all Latex equations have to be rendered as images
in formats such as png or svg. While this is fine for displaying the equation
it would be a pain for any reader that is trying to copy the content of the page.
While this limitation wasn't a dealbreaker it compounded my WordPress dislike.&lt;/p&gt;
&lt;h2&gt;Lots and lots of overhead (Mentally and Computationally)&lt;/h2&gt;
&lt;p&gt;WordPress is built on PHP and MySql and lots of HTML and CSS. It requires a 
backend to function. Even after all the setup it becomes cumbersome to modify
extensively, and to write posts I would have to go into a WebGUI and figure out
what buttons do what. When adding additional plugins to do syntax highlighting
and additional javascript it would become even more difficult to modify layouts
and figure out how to make things work&lt;/p&gt;
&lt;p&gt;Additionally, it would be a lot more work if I moved hosting services
and always be worried about updates and security&lt;/p&gt;
&lt;h2&gt;I already have enough to learn&lt;/h2&gt;
&lt;p&gt;Given that I'm trying to learn more about Data Science, it just made
more sense to pick a SSG using a Python based generator. 
This means I could stay in the same software stack I use for Data Science 
and continually learn about those things, rather than have to struggle with 
learning how WordPress works&lt;/p&gt;
&lt;p&gt;Briefly listed here are the tools used to maintain this blog now &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim/Text Editor - All the content is written in text files  &lt;/li&gt;
&lt;li&gt;Python - Generates HTML from the text files  &lt;/li&gt;
&lt;li&gt;HTML/CSS - Layouts and styles the site  &lt;/li&gt;
&lt;li&gt;git - Helps maintains versions and publishes the site &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;SSGs just make sense for a DS focused blog&lt;/h1&gt;
&lt;p&gt;In summary due to the programming/stat it just made sense to work with
something that had minimal overhead of use, used the same toolsets, and 
could render all the visualizations, math, and code nicely&lt;/p&gt;
&lt;h1&gt;Others opinions&lt;/h1&gt;
&lt;p&gt;In part I made my final choice based on the positive experiences of others
as well. Here are some links to their opinions&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bdadam.com/blog/why-i-chose-a-statically-generated-website.html"&gt;http://bdadam.com/blog/why-i-chose-a-statically-generated-website.html&lt;/a&gt;&lt;br&gt;
&lt;a href="http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/"&gt;http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/"&gt;https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Interview Question: Friend Circles</title><link href="/FriendsCircles.html" rel="alternate"></link><published>2016-04-23T00:00:00+00:00</published><updated>2016-04-23T00:00:00+00:00</updated><author><name>Ravin Kumar</name></author><id>tag:None,2016-04-23:/FriendsCircles.html</id><summary type="html">&lt;p&gt;There are N students in a class. Some of them are friends, while some are not.
Their friendship is transitive in nature, i.e., if A is friend of B and B is friend of C,
then A is also friend of C. A friend circle is a group of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are N students in a class. Some of them are friends, while some are not.
Their friendship is transitive in nature, i.e., if A is friend of B and B is friend of C,
then A is also friend of C. A friend circle is a group of students who are directly or
indirectly friends.
You have to complete a function int friendCircles(char[][] friends) which returns the
number of friend circles in the class. Its argument, friends, is a NxN matrix which
consists of characters 'Y' or 'N'. If friends[i][j] = 'Y', then i and j students are
friends with each other, otherwise not. You have to return the total number of
friend circles in the class.
Note: The method signature will differ by language. For example, Java will have 'int
friendCircles﴾String[] friends﴿' where "friends" is an array of strings, which can be
viewed as a 2 dimensional array of characters.&lt;/p&gt;
&lt;p&gt;Constraints:&lt;br&gt;
-  1 &amp;lt;= N &amp;lt;= 300&lt;br&gt;
-  Each element of matrix friends will be 'Y' or 'N'&lt;br&gt;
-  Number of rows and columns will be equal in friends&lt;br&gt;
-  friends[i][i] = 'Y', where 0 &amp;lt;= i &amp;lt; N&lt;br&gt;
-  friends[i][j] = friends[j][i], where 0 &amp;lt;= i &amp;lt; j &amp;lt; N  &lt;/p&gt;
&lt;h2&gt;Question Format&lt;/h2&gt;
&lt;p&gt;Online coding challenge&lt;/p&gt;
&lt;h2&gt;Time Constraint&lt;/h2&gt;
&lt;p&gt;1 of 3 Coding problems 2 Hours given&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;This question was a 2nd round automated interview question
given after passing multiple choice statistics question&lt;/p&gt;
&lt;h2&gt;Initial thoughts&lt;/h2&gt;
&lt;p&gt;When I saw this question I made a critical error
in my initial understanding of what a friends circle meant.&lt;/p&gt;
&lt;p&gt;I was able to make the first key insight which is that the friends and relationships are a structure called
Network Graph. The problem is asking to find the number
of unique relationships that span friends. I first
ran into my first issue here.&lt;/p&gt;
&lt;p&gt;Because of the title Friends Circles I became fixated
on the thought that a closed loop is what I was
looking for. Loops in graphs are called cycles
and numerous algorithms exist to find them. However
this is not what this question was asked for and I wasted
pretty much 40 minutes implementing this solution.&lt;/p&gt;
&lt;h2&gt;Where I went wrong&lt;/h2&gt;
&lt;h3&gt;Not understanding the question&lt;/h3&gt;
&lt;p&gt;During the interview I wasn't able to understand the 
question correctly. Unfortunately since I had no human
interviewer I was unable to ask for clarification&lt;/p&gt;
&lt;h3&gt;Too slow to iterate&lt;/h3&gt;
&lt;p&gt;It became apparent to me that my understanding was
wrong when I failed the majority of the test cases.
But I had already wasted 30 minutes to get to that point
and ran out of time&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;It was misleading that the problem was titled Friends Circles
because the problem is actually asking how many people
are connected through their friends and their 
friends. In math terms it's asking how many groups
of nodes are connected by their edges.  &lt;/p&gt;
&lt;p&gt;Given this understanding the problem is extremely simple.
Any graph can be composed into a tree. This is a concept
called tree composition. In this problem all we needed
to do was pick a node, run a depth first search algorithm
to find all the nodes that share a tree, then move onto the
next node and try again. The number of unique trees
is the answer to all the test cases.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The first order of business is to read in the inputs that look like this  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;YYNN  
YYYN  
NYYN  
NNNY  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into a sparse matrix that looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I chose the sparse matrix because beside being very human readable it also
lends itself to the search process.&lt;/p&gt;
&lt;p&gt;Given a sparse matrix we can now find circles by doing a depth first search
of that person's friends as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_circles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friends_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Iterate through friends dict to find &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_friends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Recursive function that does Depth First Search of all friends&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;friend&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;find_friends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;find_friends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The algorithm works initially picking a node. It then traverses the tree
to find all others nodes (friends) that are connected with the initial node.
When it exhausts all friends in the chain it tries the next node.&lt;/p&gt;
&lt;p&gt;In particular is the find_friends function. This is the workhouse
of this implementation. It recursively finds the friends of the current node.
The find_circles function mostly acts as an outer wrapper, storing the
friends count and the visited list.&lt;/p&gt;
&lt;p&gt;The visited list is particularly important because it ensures two things.
One is that we don't waste computational time finding all the friends of a 
person we've already searched. Additionally, it allows the find_friends
function to terminate once all the visited friends in a tree have been found.&lt;/p&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;p&gt;Here's a visualization of the search process. You notice that once the algorithm
finds a tree it stays on it until there are no more nodes left.&lt;/p&gt;
&lt;p&gt;To make this visualization the algorithm was also reimplemented in javascript which
you can find here. The visualization is possible due to the awesome
d3 javascript library which will get a post of its own in the future&lt;/p&gt;
&lt;h3&gt;Click to start search&lt;/h3&gt;
&lt;p&gt;&lt;div id="vis"&gt; &lt;/div&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Visualization"></category><category term="Algorithms"></category><category term="Interview"></category></entry></feed>